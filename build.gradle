import com.github.spotbugs.SpotBugsTask

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.22.0'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.8'
    }
}

allprojects {
    group 'com.wilmol'
    version = '1.0.0'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = 11.0
    targetCompatibility = 11.0

    // Spotless (code formatting)
    apply plugin: 'com.diffplug.gradle.spotless'
    spotless {
        java {
            removeUnusedImports()
            googleJavaFormat()
        }
    }

    // Checkstyle (static analysis - code quality/style)
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = '8.21'
        configFile = rootProject.file('gradle/checkstyle/checkstyle.xml')
        maxErrors = 0
        maxWarnings = 0
        ignoreFailures = false
    }

    // SpotBugs (static analysis - find possible bugs, performance issues etc.)
    apply plugin: 'com.github.spotbugs'
    spotbugs {
        toolVersion = '3.1.12'
        effort = 'max'
        reportLevel = 'low'
        ignoreFailures = false
    }
    tasks.withType(SpotBugsTask) {
        reports {
            html.enabled = true
            xml.enabled = false
        }
    }

    // Tests
    tasks.withType(Test) {
        // run tests in parallel, assumes they're threadsafe
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        // use JUnit 5 engine
        useJUnitPlatform()
        // log the full failure messages
        testLogging {
            exceptionFormat = 'full'
            events = ['failed', 'skipped']
        }
    }

    // JaCoCo (code coverage reporting)
    apply plugin: 'jacoco'
    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
            csv.enabled = false
        }
    }
    check.dependsOn jacocoTestReport

    // dependency version numbers
    ext {
        junitVersion = '5.5.2'
        truthVersion = '1.0'
        mockitoVersion = '3.1.0'

        guavaVersion = '28.1-jre'
        log4jVersion = '2.12.1'
    }
    
    // dependency cleanup, exclusions and resolutions
    configurations.all {
        exclude group: "org.assertj" // using truth instead

        resolutionStrategy {
            force "com.google.guava:guava:$guavaVersion" // so the android version isn't pulled in
        }
    }

    dependencies {
        implementation "com.google.guava:guava:$guavaVersion"
        implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
        implementation 'com.google.code.findbugs:annotations:3.0.1'

        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testImplementation "com.google.truth:truth:$truthVersion"
        testImplementation "com.google.truth.extensions:truth-java8-extension:$truthVersion"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
    }
}
